
import javax.swing.JOptionPane;

public class frmMain extends javax.swing.JFrame {
    public frmMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTo = new javax.swing.JLabel();
        lblFrom = new javax.swing.JLabel();
        cmbbxFrom = new javax.swing.JComboBox<>();
        cmbbxTo = new javax.swing.JComboBox<>();
        txtfldFrom = new javax.swing.JTextField();
        txtfldTo = new javax.swing.JTextField();
        btnConvert = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        lblInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Numeral Systems Convertions");
        setResizable(false);

        lblTo.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblTo.setText("To:");
        lblTo.setMaximumSize(new java.awt.Dimension(28, 14));
        lblTo.setMinimumSize(new java.awt.Dimension(28, 14));
        lblTo.setPreferredSize(new java.awt.Dimension(28, 14));

        lblFrom.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        lblFrom.setText("From:");

        cmbbxFrom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbbxFrom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Decimal", "Binary", "Octal", "Hexadecimal" }));

        cmbbxTo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbbxTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Decimal", "Binary", "Octal", "Hexadecimal" }));

        txtfldFrom.setToolTipText("Enter the value which is you want to convert.");

        txtfldTo.setEditable(false);
        txtfldTo.setToolTipText("Result from the convertion.");

        btnConvert.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnConvert.setText("Convert");
        btnConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertActionPerformed(evt);
            }
        });

        lblInfo.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFrom)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbbxFrom, 0, 197, Short.MAX_VALUE))
                            .addComponent(txtfldFrom))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbbxTo, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtfldTo, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnConvert, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(202, 202, 202))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbbxFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbbxTo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtfldFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfldTo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnConvert, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertActionPerformed
        String txt1 = cmbbxFrom.getItemAt(cmbbxFrom.getSelectedIndex());
        String txt2 = cmbbxTo.getItemAt(cmbbxTo.getSelectedIndex());
        String operation = choosingOperation(txt1, txt2);
        String strFromNum;
        String result;
        int endIndex = 0;
        float floatFromNum;
        int integerFromNum;
        boolean check = false;
        if (txtfldFrom.getText().equals(""))
        {
            txtfldTo.setText("");
            return;
        }
        if (operation.equals("dtd"))
        {
            try
            {
                floatFromNum = Float.parseFloat(txtfldFrom.getText());
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null, "Enter only integers !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            result = decimalToDecimal(txtfldFrom.getText());
            txtfldTo.setText(result);
        }
        else if (operation.equals("dtb"))
        {
            try
            {
                floatFromNum = Float.parseFloat(txtfldFrom.getText());
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null, "Enter only integers !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (floatFromNum != (int) floatFromNum)
            {
                integerFromNum = floatToInteger(floatFromNum);
            }
            integerFromNum = (int) floatFromNum;
            result = decimalToBinary(integerFromNum);
            txtfldTo.setText(result);
        }
        else if (operation.equals("dto"))
        {
            try
            {
                floatFromNum = Float.parseFloat(txtfldFrom.getText());
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null, "Enter only integers !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (floatFromNum != (int) floatFromNum)
            {
                integerFromNum = floatToInteger(floatFromNum);
            }
            integerFromNum = (int) floatFromNum;
            result = decimalToOctal(integerFromNum);
            txtfldTo.setText(result);
        }
        else if (operation.equals("dth"))
        {
            try
            {
                floatFromNum = Float.parseFloat(txtfldFrom.getText());
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null, "Enter only integers !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (floatFromNum != (int) floatFromNum)
            {
                integerFromNum = floatToInteger(floatFromNum);
            }
            else
            {
                lblInfo.setText("");
            }
            integerFromNum = (int) floatFromNum;
            result = decimalToHexadecimal(integerFromNum);
            txtfldTo.setText(result);
        }
        else if (operation.equals("btd"))
        {
            try
            {
                floatFromNum = Float.parseFloat(txtfldFrom.getText());
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null, "Enter only integers !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            strFromNum = txtfldFrom.getText();
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if (strFromNum.charAt(i) == '.' && !check)
                {
                    endIndex = i;
                    check = true;
                }
                if(check)
                {
                    String txt = String.format("Entered value transformed automatically from float number to integer number.\n %s --> %s", strFromNum , strFromNum.substring(0, endIndex));
                    strFromNum = strFromNum.substring(0, endIndex);                  
                    txtfldFrom.setText(strFromNum);
                    lblInfo.setText(txt);
                    break;
                }
            }
            if(!check)
            {
                lblInfo.setText("");
            }
            if(!isBinary(strFromNum))
            {
                JOptionPane.showMessageDialog(null, "Enter only 0 and 1 !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            result = binaryToDecimal(strFromNum);
            txtfldTo.setText(result);
        }
        else if (operation.equals("btb"))
        {
            try
            {
                floatFromNum = Float.parseFloat(txtfldFrom.getText());
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null, "Enter only integers !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            strFromNum = txtfldFrom.getText();
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if (strFromNum.charAt(i) == '.' && !check)
                {
                    endIndex = i;
                    check = true;
                }
                if(check)
                {
                    if(strFromNum.charAt(i) != '0')
                    {
                        String txt = String.format("Entered value transformed automatically from float number to integer number.\n %s --> %s", strFromNum , strFromNum.substring(0, endIndex));
                        strFromNum = strFromNum.substring(0, endIndex);                  
                        txtfldFrom.setText(strFromNum);
                        lblInfo.setText(txt);
                        break;
                    }
                }
            }
            if(!check)
            {
                lblInfo.setText("");
            }
            if(!isBinary(strFromNum))
            {
                JOptionPane.showMessageDialog(null, "Enter only 0 and 1 !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            result = binaryToBinary(txtfldFrom.getText());
            txtfldTo.setText(result);
        }
        else if (operation.equals("otd"))
        {
            try
            {
                floatFromNum = Float.parseFloat(txtfldFrom.getText());
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null, "Enter only integers !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            strFromNum = txtfldFrom.getText();
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if (strFromNum.charAt(i) == '.' && !check)
                {
                    endIndex = i;
                    check = true;
                }
                if(check)
                {
                    if(strFromNum.charAt(i) != '0')
                    {
                        String txt = String.format("Entered value transformed automatically from float number to integer number.\n %s --> %s", strFromNum , strFromNum.substring(0, endIndex));
                        strFromNum = strFromNum.substring(0, endIndex);                  
                        txtfldFrom.setText(strFromNum);
                        lblInfo.setText(txt);
                        break;
                    }
                }
            }
            if(!check)
            {
                lblInfo.setText("");
            }
            if(!isOctal(strFromNum))
            {
                JOptionPane.showMessageDialog(null, "You can not enter 8 or 9 !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            result = octalToDecimal(strFromNum);
            txtfldTo.setText(result);
        }
        else if (operation.equals("htd"))
        {
            strFromNum = txtfldFrom.getText();
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if(!((strFromNum.charAt(i) >= 'a' && strFromNum.charAt(i) <= 'f' || strFromNum.charAt(i) >= 'A' && strFromNum.charAt(i) <= 'F') || (strFromNum.charAt(i) >= '0' && strFromNum.charAt(i) <= '9')))
                {
                    if(i == 0 && strFromNum.charAt(i) == '-')
                    {
                        continue;
                    }
                    if(strFromNum.charAt(i) == '.')
                    {
                        continue;
                    }
                    JOptionPane.showMessageDialog(null, "Enter only integers and A B C D E F !", "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if (strFromNum.charAt(i) == '.' && !check)
                {
                    endIndex = i;
                    check = true;
                }
                if(check)
                {
                    if(strFromNum.charAt(i) != '0')
                    {
                        String txt = String.format("Entered value transformed automatically from float number to integer number.\n %s --> %s", strFromNum , strFromNum.substring(0, endIndex));
                        strFromNum = strFromNum.substring(0, endIndex);                  
                        txtfldFrom.setText(strFromNum);
                        lblInfo.setText(txt);
                        break;
                    }
                }
            }
            if(!check)
            {
                lblInfo.setText("");
            }
            result = hexadecimalToDecimal(strFromNum);
            txtfldTo.setText(result);
        }
        else if (operation.equals("bto"))
        {
            try
            {
                floatFromNum = Float.parseFloat(txtfldFrom.getText());
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null, "Enter only integers !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            strFromNum = txtfldFrom.getText();
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if (strFromNum.charAt(i) == '.' && !check)
                {
                    endIndex = i;
                    check = true;
                }
                if(check)
                {
                    if(strFromNum.charAt(i) != '0')
                    {
                        String txt = String.format("Entered value transformed automatically from float number to integer number.\n %s --> %s", strFromNum , strFromNum.substring(0, endIndex));
                        strFromNum = strFromNum.substring(0, endIndex);                  
                        txtfldFrom.setText(strFromNum);
                        lblInfo.setText(txt);
                        break;
                    }
                }
            }
            if(!check)
            {
                lblInfo.setText("");
            }
            if(!isBinary(strFromNum))
            {
                JOptionPane.showMessageDialog(null, "Enter only 0 and 1 !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            result = binaryToOctal(strFromNum);
            txtfldTo.setText(result);
        }
        else if (operation.equals("bth"))
        {
            try
            {
                floatFromNum = Float.parseFloat(txtfldFrom.getText());
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null, "Enter only integers !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            strFromNum = txtfldFrom.getText();
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if (strFromNum.charAt(i) == '.' && !check)
                {
                    endIndex = i;
                    check = true;
                }
                if(check)
                {
                    if(strFromNum.charAt(i) != '0')
                    {
                        String txt = String.format("Entered value transformed automatically from float number to integer number.\n %s --> %s", strFromNum , strFromNum.substring(0, endIndex));
                        strFromNum = strFromNum.substring(0, endIndex);                  
                        txtfldFrom.setText(strFromNum);
                        lblInfo.setText(txt);
                        break;
                    }
                }
            }
            if(!check)
            {
                lblInfo.setText("");
            }
            if(!isBinary(strFromNum))
            {
                JOptionPane.showMessageDialog(null, "Enter only 0 and 1 !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            result = binaryToHexadecimal(strFromNum);
            txtfldTo.setText(result);
        }
        else if (operation.equals("otb"))
        {
            try
            {
                floatFromNum = Float.parseFloat(txtfldFrom.getText());
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null, "Enter only integers !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            strFromNum = txtfldFrom.getText();
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if (strFromNum.charAt(i) == '.' && !check)
                {
                    endIndex = i;
                    check = true;
                }
                if(check)
                {
                    if(strFromNum.charAt(i) != '0')
                    {
                        String txt = String.format("Entered value transformed automatically from float number to integer number.\n %s --> %s", strFromNum , strFromNum.substring(0, endIndex));
                        strFromNum = strFromNum.substring(0, endIndex);                  
                        txtfldFrom.setText(strFromNum);
                        lblInfo.setText(txt);
                        break;
                    }
                }
            }
            if(!check)
            {
                lblInfo.setText("");
            }
            if(!isOctal(strFromNum))
            {
                JOptionPane.showMessageDialog(null, "You can not enter 8 or 9 !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            result = octalToBinary(strFromNum);
            txtfldTo.setText(result);
        }
        else if (operation.equals("oto"))
        {
            try
            {
                floatFromNum = Float.parseFloat(txtfldFrom.getText());
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null, "Enter only integers !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            strFromNum = txtfldFrom.getText();
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if (strFromNum.charAt(i) == '.' && !check)
                {
                    endIndex = i;
                    check = true;
                }
                if(check)
                {
                    if(strFromNum.charAt(i) != '0')
                    {
                        String txt = String.format("Entered value transformed automatically from float number to integer number.\n %s --> %s", strFromNum , strFromNum.substring(0, endIndex));
                        strFromNum = strFromNum.substring(0, endIndex);                  
                        txtfldFrom.setText(strFromNum);
                        lblInfo.setText(txt);
                        break;
                    }
                }
            }
            if(!check)
            {
                lblInfo.setText("");
            }
            if(!isOctal(strFromNum))
            {
                JOptionPane.showMessageDialog(null, "You can not enter 8 or 9 !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            result = octalToOctal(strFromNum);
            txtfldTo.setText(result);
        }
        else if (operation.equals("oth"))
        {
            try
            {
                floatFromNum = Float.parseFloat(txtfldFrom.getText());
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null, "Enter only integers !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            strFromNum = txtfldFrom.getText();
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if (strFromNum.charAt(i) == '.' && !check)
                {
                    endIndex = i;
                    check = true;
                }
                if(check)
                {
                    if(strFromNum.charAt(i) != '0')
                    {
                        String txt = String.format("Entered value transformed automatically from float number to integer number.\n %s --> %s", strFromNum , strFromNum.substring(0, endIndex));
                        strFromNum = strFromNum.substring(0, endIndex);                  
                        txtfldFrom.setText(strFromNum);
                        lblInfo.setText(txt);
                        break;
                    }
                }
            }
            if(!check)
            {
                lblInfo.setText("");
            }
            if(!isOctal(strFromNum))
            {
                JOptionPane.showMessageDialog(null, "You can not enter 8 or 9 !", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            result = octalToHexadecimal(strFromNum);
            txtfldTo.setText(result);
        }
        else if (operation.equals("htb"))
        {
            strFromNum = txtfldFrom.getText();
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if(!((strFromNum.charAt(i) >= 'a' && strFromNum.charAt(i) <= 'f' || strFromNum.charAt(i) >= 'A' && strFromNum.charAt(i) <= 'F') || (strFromNum.charAt(i) >= '0' && strFromNum.charAt(i) <= '9')))
                {
                    if(i == 0 && strFromNum.charAt(i) == '-')
                    {
                        continue;
                    }
                    if(strFromNum.charAt(i) == '.')
                    {
                        continue;
                    }
                    JOptionPane.showMessageDialog(null, "Enter only integers and A B C D E F !", "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if (strFromNum.charAt(i) == '.' && !check)
                {
                    endIndex = i;
                    check = true;
                }
                if(check)
                {
                    if(strFromNum.charAt(i) != '0')
                    {
                        String txt = String.format("Entered value transformed automatically from float number to integer number.\n %s --> %s", strFromNum , strFromNum.substring(0, endIndex));
                        strFromNum = strFromNum.substring(0, endIndex);                  
                        txtfldFrom.setText(strFromNum);
                        lblInfo.setText(txt);
                        break;
                    }
                }
            }
            if(!check)
            {
                lblInfo.setText("");
            }
            result = hexadecimalToBinary(strFromNum);
            txtfldTo.setText(result);
        }
        else if (operation.equals("hto"))
        {
            strFromNum = txtfldFrom.getText();
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if(!((strFromNum.charAt(i) >= 'a' && strFromNum.charAt(i) <= 'f' || strFromNum.charAt(i) >= 'A' && strFromNum.charAt(i) <= 'F') || (strFromNum.charAt(i) >= '0' && strFromNum.charAt(i) <= '9')))
                {
                    if(i == 0 && strFromNum.charAt(i) == '-')
                    {
                        continue;
                    }
                    if(strFromNum.charAt(i) == '.')
                    {
                        continue;
                    }
                    JOptionPane.showMessageDialog(null, "Enter only integers and A B C D E F !", "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if (strFromNum.charAt(i) == '.' && !check)
                {
                    endIndex = i;
                    check = true;
                }
                if(check)
                {
                    if(strFromNum.charAt(i) != '0')
                    {
                        String txt = String.format("Entered value transformed automatically from float number to integer number.\n %s --> %s", strFromNum , strFromNum.substring(0, endIndex));
                        strFromNum = strFromNum.substring(0, endIndex);                  
                        txtfldFrom.setText(strFromNum);
                        lblInfo.setText(txt);
                        break;
                    }
                }
            }
            if(!check)
            {
                lblInfo.setText("");
            }
            result = hexadecimalToOctal(strFromNum);
            txtfldTo.setText(result);
        }
        else if (operation.equals("hth"))
        {
            strFromNum = txtfldFrom.getText();
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if(!((strFromNum.charAt(i) >= 'a' && strFromNum.charAt(i) <= 'f' || strFromNum.charAt(i) >= 'A' && strFromNum.charAt(i) <= 'F') || (strFromNum.charAt(i) >= '0' && strFromNum.charAt(i) <= '9')))
                {
                    if(i == 0 && strFromNum.charAt(i) == '-')
                    {
                        continue;
                    }
                    if(strFromNum.charAt(i) == '.')
                    {
                        continue;
                    }
                    JOptionPane.showMessageDialog(null, "Enter only integers and A B C D E F !", "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            for(int i = 0 ; i < strFromNum.length() ; i++)
            {
                if (strFromNum.charAt(i) == '.' && !check)
                {
                    endIndex = i;
                    check = true;
                }
                if(check)
                {
                    if(strFromNum.charAt(i) != '0')
                    {
                        String txt = String.format("Entered value transformed automatically from float number to integer number.\n %s --> %s", strFromNum , strFromNum.substring(0, endIndex));
                        strFromNum = strFromNum.substring(0, endIndex);                  
                        txtfldFrom.setText(strFromNum);
                        lblInfo.setText(txt);
                        break;
                    }
                }
            }
            if(!check)
            {
                lblInfo.setText("");
            }
            result = hexadecimalToHexadecimal(strFromNum);
            txtfldTo.setText(result);
        }
    }//GEN-LAST:event_btnConvertActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMain().setVisible(true);
            }
        });
    }
    
    private String decimalToDecimal(String decimalNum)
    {
        return decimalNum;
    }
    
    private String decimalToBinary(int decimalNum)
    {
        String strResult = "";
        int intTemp = decimalNum;
        boolean isNegative = false;
        if (decimalNum < 0)
        {
            isNegative = true;
            intTemp = intTemp * -1;
        }
        else if (decimalNum == 0)
        {
            return "0";
        }
        while (intTemp != 0)
        {
            strResult = strResult + String.valueOf(intTemp % 2);
            intTemp /= 2;
        }
        String strTemp = strResult;
        if (isNegative)
        {
            strResult = "-";
        }
        else
        {
            strResult = "";
        }
        for (int i = strTemp.length() - 1 ; i >= 0 ; i--)
        {
            strResult = strResult + strTemp.charAt(i);
        }
        return strResult;
    }
    
    private String decimalToOctal(int decimalNum)
    {
        String strResult = "";
        int intTemp = decimalNum;
        boolean isNegative = false;
        if (decimalNum < 0)
        {
            isNegative = true;
            intTemp = intTemp * -1;
        }
        else if (decimalNum == 0)
        {
            return "0";
        }
        while (intTemp != 0)
        {
            strResult = strResult + String.valueOf(intTemp % 8);
            intTemp /= 8;
        }
        String strTemp = strResult;
        if (isNegative)
        {
            strResult = "-";
        }
        else
        {
            strResult = "";
        }
        for (int i = strTemp.length() - 1 ; i >= 0 ; i--)
        {
            strResult = strResult + strTemp.charAt(i);
        }
        return strResult;
    }
    
    private String decimalToHexadecimal(int decimalNum)
    {
        String strResult = "";
        String temp;
        int intTemp = decimalNum;
        boolean isNegative = false;
        if (decimalNum < 0)
        {
            isNegative = true;
            intTemp = intTemp * -1;
        }
        else if (decimalNum == 0)
        {
            return "0";
        }
        while (intTemp != 0)
        {
            temp = String.valueOf(intTemp % 16);
            if (temp.equals("10"))
            {
                strResult = strResult + "A";
            }
            else if (temp.equals("11"))
            {
                strResult = strResult + "B";
            }
            else if (temp.equals("12"))
            {
                strResult = strResult + "C";
            }
            else if (temp.equals("13"))
            {
                strResult = strResult + "D";
            }
            else if (temp.equals("14"))
            {
                strResult = strResult + "E";
            }
            else if (temp.equals("15"))
            {
                strResult = strResult + "F";
            }
            else
            {
                strResult = strResult + String.valueOf(intTemp % 16);
            }
            intTemp /= 16;
        }
        String strTemp = strResult;
        if (isNegative)
        {
            strResult = "-";
        }
        else
        {
            strResult = "";
        }
        for (int i = strTemp.length() - 1 ; i >= 0 ; i--)
        {
            strResult = strResult + strTemp.charAt(i);
        }
        return strResult;
    }
    
    private String binaryToDecimal(String binaryNum)
    {
        String strResult = "";
        int integerResult = 0;
        String strTemp = binaryNum;
        int count = 0;
        boolean isNegative = false;
        if (binaryNum.substring(0,1).equals("-"))
        {
            isNegative = true;
            strTemp = strTemp.substring(1);
        }
        if (strTemp.equals("0"))
        {
            isNegative = false;
            return "0";
        }
        for(int i = strTemp.length() ; i > 0 ; i--)
        {
            if(strTemp.substring(i-1, i).equals("1"))
            {
                integerResult += Math.pow(2, count);
            }
            count++;
        }
        strResult = String.valueOf(integerResult);
        if (isNegative)
        {
            strResult = "-" + strResult;
        }      
        return strResult;
    }
      
    private String octalToDecimal(String octalNum)
    {
        String strResult = "";
        int integerResult = 0;
        String strTemp = octalNum;
        int count = 0;
        boolean isNegative = false;
        if (octalNum.substring(0,1).equals("-"))
        {
            isNegative = true;
            strTemp = strTemp.substring(1);
        }
        if (strTemp.equals("0"))
        {
            isNegative = false;
            return "0";
        }
        for(int i = strTemp.length()-1 ; i >= 0 ; i--)
        {
            integerResult += Character.getNumericValue(strTemp.charAt(i)) * Math.pow(8, count);
            count++;
        }
        strResult = String.valueOf(integerResult);
        if (isNegative)
        {
            strResult = "-" + strResult;
        }      
        return strResult;
    }
    
    private String hexadecimalToDecimal(String hexadecimalNum)
    {
        String strResult = "";
        int integerResult = 0;
        String strTemp = hexadecimalNum;
        int count = 0;
        boolean isNegative = false;
        char ch;
        if (hexadecimalNum.substring(0,1).equals("-"))
        {
            isNegative = true;
            strTemp = strTemp.substring(1);
        }
        if (strTemp.equals("0"))
        {
            isNegative = false;
            return "0";
        }
        for(int i = strTemp.length()-1 ; i >= 0 ; i--)
        {
            ch = strTemp.charAt(i);
            if (ch == 'a' || ch == 'A')
            {
                integerResult += 10 * Math.pow(16, count);
            }
            else if (ch == 'b' || ch == 'B')
            {
                integerResult += 11 * Math.pow(16, count);
            }
            else if (ch == 'c' || ch == 'C')
            {
                integerResult += 12 * Math.pow(16, count);
            }
            else if (ch == 'd' || ch == 'D')
            {
                integerResult += 13 * Math.pow(16, count);
            }
            else if (ch == 'e' || ch == 'E')
            {
                integerResult += 14 * Math.pow(16, count);
            }
            else if (ch == 'f' || ch == 'F')
            {
                integerResult += 15 * Math.pow(16, count);
            }
            else
            {
                integerResult += Character.getNumericValue(ch) * Math.pow(16, count);
            }           
            count++;
        }
        strResult = String.valueOf(integerResult);
        if (isNegative)
        {
            strResult = "-" + strResult;
        }      
        return strResult;
    }
    
    private String binaryToBinary(String binaryNum)
    {
        return binaryNum;
    }
    
    private String binaryToOctal(String binaryNum)
    {
        return decimalToOctal(Integer.parseInt(binaryToDecimal(binaryNum)));
    }
    
    private String binaryToHexadecimal(String binaryNum)
    {
        return decimalToHexadecimal(Integer.parseInt(binaryToDecimal(binaryNum)));
    }
    
    private String octalToBinary(String octalNum)
    {
        return decimalToBinary(Integer.parseInt(octalToDecimal(octalNum)));
    }
    
    private String octalToOctal(String octalNum)
    {
        return octalNum;
    }
    
    private String octalToHexadecimal(String octalNum)
    {
        return decimalToHexadecimal(Integer.parseInt(octalToDecimal(octalNum)));
    }
    
    private String hexadecimalToBinary(String hexadecimalNum)
    {
        return decimalToBinary(Integer.parseInt(hexadecimalToDecimal(hexadecimalNum)));
    }
    
    private String hexadecimalToOctal(String hexadecimalNum)
    {
        return decimalToOctal(Integer.parseInt(hexadecimalToDecimal(hexadecimalNum)));
    }
    
    private String hexadecimalToHexadecimal(String hexadecimalNum)
    {
        return hexadecimalNum;
    }
    
    private String choosingOperation(String str1, String str2)
    {
        if (str1 == "Decimal" && str2 == "Decimal")
        {
            return "dtd";
        }
        else if (str1 == "Decimal" && str2 == "Binary")
        {
            return "dtb";
        }
        else if (str1 == "Decimal" && str2 == "Octal")
        {
            return "dto";
        }
        else if (str1 == "Decimal" && str2 == "Hexadecimal")
        {
            return "dth";
        }
        else if (str1 == "Binary" && str2 == "Decimal")
        {
            return "btd";
        }
        else if (str1 == "Octal" && str2 == "Decimal")
        {
            return "otd";
        }
        else if (str1 == "Hexadecimal" && str2 == "Decimal")
        {
            return "htd";
        }
        else if (str1 == "Binary" && str2 == "Binary")
        {
            return "btb";
        }
        else if (str1 == "Binary" && str2 == "Octal")
        {
            return "bto";
        }
        else if (str1 == "Binary" && str2 == "Hexadecimal")
        {
            return "bth";
        }
        else if (str1 == "Octal" && str2 == "Binary")
        {
            return "otb";
        }
        else if (str1 == "Octal" && str2 == "Octal")
        {
            return "oto";
        }
        else if (str1 == "Octal" && str2 == "Hexadecimal")
        {
            return "oth";
        }
        else if (str1 == "Hexadecimal" && str2 == "Binary")
        {
            return "htb";
        }
        else if (str1 == "Hexadecimal" && str2 == "Octal")
        {
            return "hto";
        }
        else if (str1 == "Hexadecimal" && str2 == "Hexadecimal")
        {
            return "hth";
        }
        else
        {
            return "0";
        }
    }
    
    private int floatToInteger(float num)
    {
        String entered = txtfldFrom.getText();
        String txt = String.format("Entered value transformed automatically from float number to integer number.\n %s --> %d", entered , (int) num);
        txtfldFrom.setText(String.valueOf((int) num));
        lblInfo.setText(txt);
        return (int) num;
    }
    
    private boolean isBinary(String binaryNum)
    {
        String temp = binaryNum;
        for (int i = 0 ; i < temp.length() ; i++)
        {
            if (temp.charAt(i) != '0' && temp.charAt(i) != '1')
            {
                if(temp.charAt(i) == '-')
                {
                    continue;
                }
                else
                {
                    return false;  
                }               
            }
        }
        return true;
    }
    
    private boolean isOctal(String octalNum)
    {
        String temp = octalNum;
        for (int i = 0 ; i < temp.length() ; i++)
        {
            if (temp.charAt(i) == '8' || temp.charAt(i) == '9')
            {
                if(temp.charAt(i) == '-')
                {
                    continue;
                }
                else
                {
                    return false;  
                }               
            }
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConvert;
    private javax.swing.JComboBox<String> cmbbxFrom;
    private javax.swing.JComboBox<String> cmbbxTo;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblTo;
    private javax.swing.JTextField txtfldFrom;
    private javax.swing.JTextField txtfldTo;
    // End of variables declaration//GEN-END:variables
}
